using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Windows.Forms;

namespace WFVL
{
    public enum enTabDan  // перечисления возможных вариантов значений TabDan
    {
        TL, //температура    в точке L
        FL, //влажность      в точке L
        KL, //контроль       в точке L
        Hl  //шаг (значение) в точке L
    };//enum enTabDan {

    class VseConstDan
    {
    }
    static public class clSoob //сообщения, используемые в проге (из VL + новые)
    {
        /* копия из VL из unit URVP_rDan; {Модуль с ресурсами для ввода данных для создания объекта VtvL.

        SoobWarn  : string =' Abort - прервать ввод  для исправления данных.' +
                 ' Ignore - продолжить ввод для контроля других параметров  и ' +
                 ' построения возможной  части списка - до обнаружения  ' +
                 ' признака его окончания (ячейка пустая, нечисловая и др.)';
 SoobWarnP : string =' OK - продолжить ввод данных.' +
                 ' Abort - прервать ввод  для исправления данных. ';
 SoobInf   : string =' OK - продолжить ввод данных.' +                   {для mtInformation}
                 ' Abort - прервать ввод  для исправления данных. ';

 Sp        : string = ' Принимается условное значение по умолчанию равное ';
 Smax      : string = ' Значение превышает  разумное максимальное равное ';
 Sv        : string = ' Вспомогательное сообщение для контроля. ';
 Smin      : string = ' Значение менее разумного ммнимального равного ';
 Srez      : string = ' Результат ввода V_';
 Spar      : string = ' Параметр ';

 SoobVvod1 : string =' Данные должны вводиться без пропусков пустых ячеек. Ячейки, следующие за пустой, не учитываются. ';
 SoobVvod2 : string =' Элементы должны располагаться по возрастанию их расположения (длины) от начала воздуховода (ветви) без повторения значений ';
 SoobVvod3 : string =' Список содержит пустые ячейки ';
 SoobVvod4 : string =' Невещественное число. ';
 SoobVvod5 : string =' Значение L ячейки <= значению  предыдущей. ';
 SoobVvod6 : string =' Таблица T(L) содержит пустые ячейки ';
 SoobVvod7 : string =' Значение расстояния не может быть <= 0.0.';
 SoobVvod8 : string =' Значение расстояния не может быть больше заданного для выработки';
 SoobVvod9 : string =' Значение T не может быть < минимально допустимого.';
 SoobVvod10: string =' Значение T не может быть > максимально допустимого.';
 SoobVvod11: string =' Пустое T(1) и логичное L(1). Рассматриваются как условный признак задания списка.';
 SoobVvod12: string =' Пустое T(2) и логичное L(1). Рассматриваются как условный признак задания списка.';
 SoobVvod13: string =' Пустое T(3) и логичные L(1),L(2). Рассматриваются как условный признак задания списка.';
 SoobVvod14: string =' Сомнительные данные. Трактуются как условный список с постоянным T по длине ветви ';
 SoobVvod15: string =' Построение списка невозможно. ';
 SoobVvod16: string =' Значение угла наклона допустимо в диапазоне от -90град.(ВВ выработка) до +90град.(ВП выработка). ';
 SoobVvod17: string =' Значение коэффициента urv допустимо в диапазоне от -1.0 (-90град.,ВВ выработка) до 1.0 (90град.,ВП выработка)';
*/

        
        static public string path   = @"D:\RAB\VL1\WFVL\"; //путь (местоположение) всех файлов для вывода сообщений 
        static public string LVfile = path + "VLfile.txt"; //путь и имя файла для вывода сообщений в потоке
        static public string LVtext = path + "VLtext.txt"; //путь и имя файла для вывода порции текста 
        static public string Vvod   = path + "ЗамечанияВводаДанных.txt"; //путь и имя файла для вывода порции текста 

        static public bool kdVseOtlSoob = true;   //код выдачи всех отлодочных сообщений 
                
        // эти сообщения вида SoovVvod_i добавляю к имевшимся в VL
        static public string SoobVvod_1 = " Отсутствуют значения длины L. ";
        static public string SoobVvod_2 = " Отсутствуют значения параметра  ";
        static public string SoobVvod_3 = " Массивы L и значений параметра имеют разную длину ";
        static public string SoobVvod_4 = " Попытка определения поля через свойсво set. Этого не должно быть. Необходима отладка.";

        //VLfile.txt
        static public void ZapToVLfile(string s) //дозапись заданной строки в файл VLfile.txt
        {            
            FileStream swFile = new FileStream(clSoob.LVfile, FileMode.Append);
            StreamWriter sw = new StreamWriter(swFile);            
            //sw.WriteLine();
            sw.WriteLine(s);            
            sw.Close();
        }
        //ЗамечанияВводаДанных.txt.
            static public void ZapVvodDan(string s) //дозапись заданной строки в файл ЗамечанияВводаДанных.txt.
        {
            FileStream svFile = new FileStream(clSoob.Vvod, FileMode.Append);
            StreamWriter sv = new StreamWriter(svFile);
            //sw.WriteLine();
            sv.WriteLine(s);
            sv.Close();
        }

    }

    static class clConstDan
    { //константные данные (все неизменяемые в проге)
            
        static double mair = 28.96;    //молекулярный вес воздуха 
        static double mwp = 18.016;   //молекулярный вес водяного пара
        static double rp = 8314.41;  //универсальная газовая постоянная
        static double g = 9.8067;   //ускорение свободного падения
        static double a = mair / rp;     //константы для формулы определения плотности воздуха
        static double c = (mair - mwp) / rp;//

        /*Таблица парциальных давлений влажного воздуха из книги Сухан Байер Термодинамика РА */
        static public double[] arPsSuxan = {
        611.0,  615.0, 620.0, 624.0, 629.0, 633.0, 639.0,
        643.0,  648.0, 652.0, 657.0, 661.0, 667.0, 671.0, 767.0,
        681.0,  685.0, 691.0, 696.0, 701.0, 705.0, 711.0, 716.0,
        721.0,  727.0, 732.0, 737.0, 743.0, 748.0, 753.0, 759.0,
        764.0,  769.0, 775.0, 780.0, 785.0, 791.0, 796.0, 803.0,
        808.0,  813.0, 819.0, 825.0, 831.0, 836.0, 843.0, 851.0,
        856.0,  861.0, 867.0, 872.0, 879.0, 885.0, 891.0, 897.0,
        904.0,  909.0, 916.0, 923.0, 929.0, 935.0, 941.0, 948.0,
        955.0,  961.0, 968.0, 975.0, 981.0, 988.0, 995.0,1001.0,
       1009.0, 1016.0,1022.0,1029.0,1037.0,1044.0,1051.0,1059.0,
       1065.0, 1073.0,1080.0,1088.0,1095.0,1103.0,1109.0,1117.0,
       1125.0, 1132.0,1140.0,1148.0,1156.0,1164.0,1172.0,1180.0,
       1188.0, 1196.0,1204.0,1212.0,1220.0,1228.0,1236.0,1244.0,
       1253.0, 1261.0,1269.0,1278.0,1286.0,1295.0,1304.0,
               1312.0,1321.0,1331.0,1339.0,1348.0,1357.0,1365.0,
       1375.0, 1384.0,1393.0,1403.0,1412.0,1421.0,1431.0,1440.0,
       1449.0, 1459.0,1468.0,1479.0,1488.0,1497.0,1508.0,1517.0,
       1527.0, 1537.0,1547.0,1557.0,1568.0,1577.0,1588.0,1599.0,
       1609.0, 1619.0,1629.0,1640.0,1651.0,1661.0,1672.0,1683.0,
       1695.0, 1705.0,1716.0,1727.0,1739.0,1749.0,1761.0,1772.0,
       1784.0, 1795.0,1807.0,1817.0,1829.0,1841.0,1853.0,1865.0,
       1877.0, 1889.0,1901.0,1913.0,1925.0,1937.0,1949.0,1962.0,
       1974.0, 1986.0,2000.0,2012.0,2025.0,2037.0,2050.0,2064.0,
       2077.0, 2089.0,2102.0,2116.0,2129.0,2142.0,2156.0,2169.0,
       2182.0, 2197.0,2210.0,2225.0,2238.0,2252.0,2262.0,2281.0,
       2294.0, 2309.0,2324.0,2338.0,2353.0,2366.0,2381.0,2396.0,
       2412.0, 2426.0,2441.0,2456.0,2472.0,
               2486.0,2502.0,2517.0,2533.0,2548.0,2564.0,2580.0,
       2596.0, 2621.0,2628.0,2644.0,2660.0,2676.0,2690.0,2709.0,
       2725.0, 2742.0,2758.0,2776.0,2792.0,2809.0,2826.0,2842.0,
       2860.0, 2877.0,2894.0,2913.0,2930.0,2648.0,2964.0,2984.0,
       3001.0, 3020.0,3038.0,3056.0,3074.0,3093.0,3112.0,3130.0,
       3149.0, 3168.0,3186.0,3205.0,3224.0,3244.0,3262.0,3282.0,
       3301.0, 3321.0,3341.0,3361.0,3381.0,3401.0,3421.0,3441.0,
       3461.0, 3482.0,3502.0,3524.0,3544.0,3565.0,3586.0,3608.0,
       3628.0, 3649.0,3672.0,3693.0,3714.0,3736.0,3758.0,3780.0,
       3801.0, 3824.0,3846.0,3869.0,3890.0,3913.0,3937.0,3960.0,
       3982.0, 4005.0,4029.0,4052.0,4076.0,4100.0,4122.0,4146.0,
       4172.0, 4194.0,4218.0,4242.0,4268.0,4292.0,4317.0,4341.0,
       4366.0, 4390.0,4416.0,4441.0,4466.0,
               4493.0,4518.0,4544.0,4570.0,4596.0,4622.0,4648.0,
       4674.0, 4701.0,4728.0,4754.0,4782.0,4809.0,4836.0,4864.0,
       4890.0, 4918.0,4946.0,4974.0,5002.0,5030.0,5058.0,5088.0,
       5116.0, 5144.0,5173.0,5202.0,5232.0,5261.0,5290.0,5320.0,
       5349.0, 5378.0,5409.0,5440.0,5469.0,5500.0,5530.0,5561.0,
       5593.0, 5624.0,5645.0,5685.0,5717.0,5749.0,5781.0,5813.0,
       5845.0, 5877.0,5909.0,5941.0,5974.0,6006.0,6039.0,6073.0,
       6106.0, 6139.0,6173.0,6207.0,6241.0,6275.0,6309.0,6343.0,
       6378.0, 6413.0,6447.0,6483.0,6518.0,6553.0,6589.0,6625.0,
       6661.0, 6697.0,6733.0,6769.0,6806.0,6842.0,6879.0,6917.0,
       6954.0, 6991.0,7030.0,7067.0,7105.0,7143.0,7182.0,7221.0,
       7259.0, 7298.0,7337.0,7375.0,7414.0,7454.0,7494.0,7534.0,
       7574.0, 7614.0,7654.0,7695.0,7737.0};
        static double TpsSuxan_min = 0.0; //Tmin для определения ps по таблице Suxan 
        static double TpsSuxan_max = 40.9; //Tmax для определения ps по таблице Suxan 

        static public double ps(double Tz)
        {
            const double HagT = 0.1; //Шаг температуры по таблице
            double TzRab = Tz;       //Tz рабочая
            double Hag = 0.0;        //общее число шагов по таблице, целое + дробная часть
            int iHag = 0;            //целое число шагов по Т
            double dHag = 0.0;       //дробная часть числа шагов по Т
            double Rez;              //результат

            //Проверка входной температуры на допустимые max и min значения 
            if (Tz > TpsSuxan_max)
            {
                TzRab = TpsSuxan_max;                
                string s = "Заданная Т=" + Tz + " превышает предельное наибольшее значение " + TpsSuxan_max + 
                    " Значение ps определяется для значения температуры " + TpsSuxan_max + " Результат будет содержать ошибку.";                
                MessageBox.Show(s); clSoob.ZapVvodDan(s);
            }
            if (Tz < TpsSuxan_min)
            {
                TzRab = TpsSuxan_min;                
                string s = "Заданная Т=" + Tz + " меньше наименьшего предельное значения " + TpsSuxan_min +
                 " Значение ps определяется для значения температуры " + TpsSuxan_min + " Результат будет содержать ошибку.";
                MessageBox.Show(s); clSoob.ZapVvodDan(s);
            }

            //определить индексную iT для чтения нужных Т из таблицы
            Hag = TzRab / HagT; //число шагов целое + дробная часть
            iHag = (int)(Hag);   //целая   часть числа шагов
            dHag = Hag - iHag;   //дробная часть числа шагов (часть-доля шага)

            Rez = arPsSuxan[iHag] + (arPsSuxan[iHag + 1] - arPsSuxan[iHag]) * dHag; //результат
            return Rez; 
        }

    }//class clConstDab {
}
